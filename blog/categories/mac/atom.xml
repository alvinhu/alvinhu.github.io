<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | alvin hu]]></title>
  <link href="http://alvinhu.com/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://alvinhu.com/"/>
  <updated>2013-10-25T03:30:37+08:00</updated>
  <id>http://alvinhu.com/</id>
  <author>
    <name><![CDATA[alvinhu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[brew, gem, rvm and bundler]]></title>
    <link href="http://alvinhu.com/blog/2013/10/25/brew-gem-rvm-and-bundler/"/>
    <updated>2013-10-25T02:43:00+08:00</updated>
    <id>http://alvinhu.com/blog/2013/10/25/brew-gem-rvm-and-bundler</id>
    <content type="html"><![CDATA[<p>brew, gem, rvm, bundler分别为<a href="http://brew.sh">Homebrew</a>, <a href="http://rubygems.org">RubyGems</a>, <a href="http://rvm.io">Ruby Version Manager</a>, <a href="http://bundler.io">Bundler</a>的简称（执行命令）。</p>

<p>Homebrew为Mac OS X提供软件包的管理。Homebrew将软件包分装到单独的目录，然后symlink到<code>/usr/local</code>中。Homebrew不会把文件安装到预置目录之外，所以可以将Homebrew安装到任何位置。它完全基于git和ruby。使用gem来安装gems，用brew来搞定他们的依赖包。</p>

<p>brew的安装：</p>

<p><code>
ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
</code></p>

<p>RubyGems是一个包管理框架，提供了ruby社区gem的托管服务，用于方便地下载、安装和使用ruby软件包。ruby软件包被称为gem，包含了ruby应用或库。安装RubyGems，需要先下载安装包，然后解压开后运行：</p>

<p><code>
ruby setup.rb
</code></p>

<p>brew和gem不同，brew用于操作系统层面上软件包的安装，而gem只是管理ruby软件。</p>

<p>Ruby Version Manager是一个命令行工具，可以方便地安装、管理不同的ruby版本，还可以为每个ruby版本创建不同的gem集合（gemsets），从而使不同的ruby应用可以独立使用自己的gem集合。</p>

<p>rvm的安装：</p>

<p><code>
$ \curl -L https://get.rvm.io | bash -s stable
</code></p>

<p>Bundler为ruby应用维持一个一致性的环境。它会跟踪应用代码和应用所需要的gem，这样应用总能包含它需要的gem（和版本）。</p>

<p>bundler的安装：</p>

<p><code>
$ gem install bundler
</code></p>

<p>安装顺序：先安装rvm，然后选择安装一个ruby版本，就可以提供一个完整的ruby运行环境。之后可以安装brew（brew基于ruby）和gem，分别管理操作系统和ruby的软件包。有了gem之后再安装bundler，因为bundler本身也是一个gem，直接通过gem安装即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Mac OS X右键菜单]]></title>
    <link href="http://alvinhu.com/blog/2012/11/28/about-mac-os-x-secondary-click/"/>
    <updated>2012-11-28T00:35:00+08:00</updated>
    <id>http://alvinhu.com/blog/2012/11/28/about-mac-os-x-secondary-click</id>
    <content type="html"><![CDATA[<h4>Launch Service</h4>

<p>Mac OS X的Launch Service用于关联应用程序和文件并维护最近打开的项目列表。</p>

<p>在文件关联和右键菜单方面，每当系统安装一个新的应用程序，都会调用Launch Service的API注册关联的文件类型。有两种情况，一种是通过pkg安装包安装的，通常这些应用程序会通过脚本主动向Launch Service注册；而第二种常见的拖拽式.app应用程序，则是由Finder和系统通过对应用程序的的一些判断后代理注册的。应用程序通过Launch Service注册以后，就和特定的支持文档产生了关联。</p>

<p>Launch Service隶属于Application Service Framework（包含一堆的应用程序接口，开发者可以通过这些接口，调用系统服务），用于使一个运行中的程序，能够打开另一个程序，文档，URL的接口。它可以打开另一个程序；在另一个程序中打开文档或URL；找到对于一个文档或URL最适用的程序；为一个应用程序注册它可以关联的文档类型和URL；获得一个文件，URL等正确的显示方式，比如如何显示此类文件的图标以及信息等；维护和更新最近试用过的最近试用程序和文档的列表。</p>

<!-- more -->


<p>从原理上看，Launch Service维护着一个文件到应用程序之间的多对多对应关系，这个关系是存在一个数据库中。这个数据库被称作Launch Service Database。对于Mac OS X下的每一个文件都有描述信息（包括我们从GetInfo中看到的一些）。Launch Service感兴趣的，就是这个文件的文件类型码，创建者签名，文件扩展名，显示名称（用在Finder或Dock中显示），文件通用类型描述（比如，是应用程序，还是文件夹，或是替身，或是文件或视频）。除了这些，还有一些额外的（Meta Data用于快速描述文件信息）标志位。比如，是否是可执行程序，是否是容器（文件夹，包，卷，dmg），是否是隐藏文件等等。而应用程序方面，Launch Service会从应用程序的info.plist中获取诸如应用程序名称，图标，应用程序可打开的文件或URL类型，运行环境，是否有UI，对应权限等信息。Launch Service就会根据这些信息，建立数据库，这就是右键点击文件时，看到的可打开此文件的应用程序列表。当然，如果一个文件根本没有任何匹配，右键菜单为空。Launch Service会跳出窗口，让用户自行选择应用程序。用户选择后，Launch Service就会将这个对应关系保存在数据库中。</p>

<p>Launch Service对于一个文件关联多种应用程序的时候，也是有优先级排序规则的，从右键菜单就可以看出，Launch Service会有一个默认选择的应用程序。它的排序规则是：</p>

<ol>
<li>用户手动指定的应用程序拥有最高优先级。</li>
<li>如果没有指定，那么Launch Service会查看此文件扩展名，然后找到数据库中所有跟此扩展名相关的应用程序。</li>
<li>如果没有扩展名，或者第二步中找到多于一个的应用程序，LS会查找该文件是否含有文件类型码，再按照此类型码在数据库中查找所有相关应用程序。</li>
<li>如果通过2，3步还是找到了多于一个的应用程序，那么，首先查找哪些应用程序注册的创建者签名和文件的创建者签名匹配，然后再查找哪些应用程序是否是Mac OS X本地应用程序（Native Program，指的是不用Classic模拟环境，X11模拟环境，Java，Python等等），再查找应用程序是否是存在于系统启动卷上，再查找哪些应用程序在本地卷上，如果到这里还是剩下多于一个的应用程序，就只能比版本号了。如果还是比不出来，那么LS就会随便排序了。</li>
</ol>


<h4>常见问题</h4>

<p>通常，我们在Mac下会遇到<strong>重复菜单项</strong>的问题，或者某些已经卸载的程序的<strong>菜单项遗留</strong>。从原因上来看，有三种可能：</p>

<ol>
<li>除了LS感兴趣的项目外，还有好多其他的项目也要被存储在数据库中。每当LS要注册一个新应用程序时，它会先看这个应用程序中有没有一个<code>inUpdate</code>的描述，如果此描述值为1（就是Yes），那么LS会查找数据库进行匹配。匹配到后会用这个新应用程序的信息来更新这个旧的信息。如果<code>inUpdate</code>为0，那么LS会直接注册这个应用程序并关联文件。这可能是潜在的重复项出现原因。</li>
<li>有些装在VM或者PD的应用程序，在VM或PD卸载后也会残留到LS数据库中。</li>
<li>应用程序描述的一些更新变化，使得LS认为这是一个全新的应用程序而直接注册。</li>
</ol>


<p>以上三个方面都有可能造成重复菜单项的出现，而且很难完全避免。</p>

<h4>解决办法</h4>

<p>如果需要清理菜单重复项和无效的关联，可以在终端运行下面命令，在本地、系统和用户空间上，重建LS数据库：</p>

<pre><code>/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user
</code></pre>

<p>lsregister命令参数如下：</p>

<pre><code>-kill：重置全局LS数据库(最先执行)
-lint：打印详细应用程序文件关联注册中的错误信息
-convert：将老数据库中的信息注册到新的LS数据库
-load：加载LS插件
-lazy n：指定一个注册等待时间
-r：递归的查找文件夹内容以做关联之用（不包括pkg类型文件和隐藏文件夹下的内容）
-R：递归的查找文件夹内容以做关联之用（包括pkg类型文件和隐藏文件夹下的内容）
-f：强制更新所有对应注册信息
-v：输出lsregister运行详细信息
-dump：在注册完成后显示数据库内容
-h：显示此帮助
</code></pre>
]]></content>
  </entry>
  
</feed>
