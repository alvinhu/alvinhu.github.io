<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | alvin hu]]></title>
  <link href="http://alvinhu.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://alvinhu.com/"/>
  <updated>2013-08-19T22:37:52+08:00</updated>
  <id>http://alvinhu.com/</id>
  <author>
    <name><![CDATA[alvinhu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通过SSL Pinning提高iOS应用的安全性]]></title>
    <link href="http://alvinhu.com/blog/2013/06/26/secure-ios-apps-on-ssl-pinning/"/>
    <updated>2013-06-26T22:47:00+08:00</updated>
    <id>http://alvinhu.com/blog/2013/06/26/secure-ios-apps-on-ssl-pinning</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>关于SSL Pinning的技术在国外有很多文章提到，但是还没有找到一篇相关的中文文档。因为在开发中碰到这个问题，所以查阅了很多相关文章，在此基于自己对SSL Pinning的理解，再融合一些其他资料，整理了一下写了这么一篇文章，既给自己做个备份，也给大家做个参考。写的好的给个掌声，写的不好请留言指正。</p>

<h2>背景</h2>

<p>在开发Client-Server架构的手机应用时，如果问到如何提高数据传输的安全性，肯定很多程序员第一时间会回答TLS/SSL。确实，对比普通的HTTP协议数据传输，SSL可以大大提高数据的安全性，因为所有传输过程中的数据都是经过加密的。如果用户在机场、咖啡厅等开放式的wifi环境下使用应用，就算有攻击者通过技术手段截取了客户端与服务器之间传输的数据，对于他们来说也不过是一些加密过的垃圾。</p>

<p>表面上看这样已经足够安全了，但是危险就在身边。虽然SSL解决了内容加密的问题，但是在这个兵火战乱的年代，和你通信的是不是真正的服务器呢？就算对方能够提供证书，这年头证书也可以伪造，<a href="http://tech.sina.com.cn/i/2011-08-31/12096005012.shtml">2011年就爆发了一次大规模的SSL证书安全攻击，受牵连的公司包括谷歌</a>。</p>

<p><img src="/images/secure-ios-apps-on-ssl-pinning/github-get-attacked.jpg" alt="GitHub被攻击" /></p>

<p>下面我们介绍为什么有了证书用了加密还会被攻击吧！</p>

<!-- more -->


<h2>中间人攻击</h2>

<p>中间人攻击（Man-in-the-middle Attack，简称MITM、MitM、MIM、MiM、MITMA）是一种由来已久的网络入侵手段，并且在今天仍然有着广泛的发展空间，如SMB会话劫持、DNS欺骗等攻击都是典型的中间人攻击。简而言之，所谓的中间人攻击就是通过拦截正常的网络通信数据，并进行数据篡改和嗅探，而通信的双方却毫不知情。</p>

<p>具体中间人攻击的定义、方法和防御措施等可以参考<a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack">维基百科</a>或者<a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack">百度百科</a>。以下两个故事用来说明中间人攻击的大致流程。</p>

<h3>西方言情简化版</h3>

<p>从前有一枚高富帅叫杰克，女友是白富美女神爱丽丝，却苦于天各一方，只能求书信往来以解相思之苦。奈何时局动荡、人心不古，觊觎女神者比比皆是。书信若为明文，定要被那中转信件的屌丝皮特拆看，而后从中作祟，行不轨之事。</p>

<p>于是杰克与爱丽丝商定，从今而后，爱丽丝给杰克的书信均以密文誊写，再附以特制封签，杰克收到密信后可凭此封签在一公证可信之处验明此信是否确为爱丽丝所发。</p>

<p>商定完毕，二人书信往来再非明文。皮特拆看无果，甚是捉急，情急之下心生一计：既然无法看到爱丽丝的密信内容，不如索性截下来信，自行伪造一封转交杰克，再设法从他那套取消息？</p>

<p>打定主意，皮特翻看了一下手中爱丽丝给杰克的一封密信：</p>

<pre><code>封签：ecaa5d137be9468d98379ada45919d80
从哪来：爱丽丝
打哪去：杰克

[正文已加密]
</code></pre>

<p>皮特旋即扣下了这封信，伪造了另外一封交给杰克：</p>

<pre><code>封签：718fe14088974488b821f8c9d8f14849
从哪来：爱丽丝
打哪去：杰克

亲爱的，上次你给我说你的银行卡帐号密码是多少来着？我一下忘记了。急用！

附：回信记得用密码「此地无银三百两」加密哟！
</code></pre>

<p>杰克收到篡改的信件后，看到爱丽丝急于盼复，未经细察，便回信告知了银行卡帐号密码。于是就悲剧了……</p>

<p>这就是最基础的中间人攻击。杰克如果谨慎一点，每次收到密信时都去那公证可信之处验证一下封签，确认信件是由爱丽丝所发，上面的悲剧就不会发生。</p>

<p>不过道高一尺、魔高一丈，皮特若能控制那公证可信之处，待杰克去验证时就可以做手脚，让杰克误以为伪造密信确为爱丽丝所发，于是继续悲剧……这种手法叫做伪造证书。</p>

<p>从这个故事可以看出中间人攻击就是躲在中间的小人，让通信的双方误以为跟自己通信的就是TA，而小人在中间获取双方的重要信息。</p>

<h3>三国通信加强版</h3>

<p>上面的故事虽然生动，但是与真正的SSL原理有一定出入，这是为了更容易理解。实际上通过SSL加密通信，一旦会话初始化完成，想要完成中间人攻击是非常困难的。TLS的中间人攻击是针对加密会话的初始化阶段进行的，而不是实际通信的阶段。加密通信的初始化阶段，需要通过非对称密码算法来协商密钥，然后用协商好的密钥，使用对称加密算法进行实际的通信。</p>

<p>不知道各位有没有见过一种锁，当用钥匙打开这种锁之后，钥匙就可以拔出来了，剩下一个开着的锁头。拿着这个开着的锁，没有钥匙，一旦锁上了就开不了。这是现实生活中的一种非对称加密的物件，能上锁，但是不能开锁。</p>

<p>现在故事开始，假设我们回到了三国时代，孙权需要和刘备通信，而且通信的内容必须要保密。于是负责接收消息的简雍想出来一个办法，找了一把上面说的那种锁（公钥），我们给它取名甲锁，先用钥匙打开，然后送给孙权。孙权在通信之前，需要找到另外一把有两个钥匙的锁（对称加密算法），我们给它取名乙锁，然后把这把乙锁和其中一把乙锁钥匙（对称密钥），放进一个无法被破拆的铁盒子里面，用简雍提供的那把开着的甲锁把铁盒子锁上。</p>

<p>这时候，这个铁盒子就无法打开了，除了拥有甲锁钥匙的简雍。这个装有乙锁和一把乙锁钥匙的铁盒子，可以放心地交到任何一个人手上，然后让他拿去给简雍。简雍拿到这个铁盒子之后，加密通信会话就建立了。他就会用甲锁钥匙打开铁盒子，取出乙锁和乙锁钥匙。刘备写下“亲，你好，我是刘备”的小纸条，放进铁盒子里，然后简雍用乙锁把铁盒子锁上，然后交回到孙权的手上。这个时候，铁盒子被孙权提供的乙锁锁上了，除了孙权和简雍，没有别人有钥匙能够打开这个铁盒子，铁盒子也就可以安全地经过邮差送到孙权的手上；孙权收到铁盒子之后，用自己的乙锁钥匙打开乙锁，读取铁盒子里面的消息，然后放进新的小纸条，再寄送回去。</p>

<p>以上是加密通信的过程。</p>

<p>接下来，别有用心的曹操出现了，他先冒充孙权的人向简雍要来了打开的甲锁。当孙权需要和刘备通信的时候，曹操再递给孙权一把他自己的丙锁，骗孙权说这把是简雍的甲锁。当孙权把自己的乙锁和乙锁钥匙放进去，交给曹操让他把这些送给简雍的时候，曹操就可以找到另外一个铁盒子，装上自己另外一把有两把钥匙的丁锁和其中一把丁锁钥匙，用真正的简雍提供的甲锁锁上，然后寄给简雍。简雍依然会正常的收到一个铁盒子，里面装着丁锁和一把丁锁钥匙，只不过，这个锁已经不是孙权的了，而是曹操的，孙权的那把乙锁实际上在曹操手上。简雍把“亲，你好，我是刘备”的小纸条放进铁盒，然后让曹操带回去给孙权，而这个时候，曹操就可以打开这个小铁盒，偷看他们之间的消息，然后自己编造一条消息，放进铁盒里面，然后传回去给孙权。</p>

<p>以上是中间人攻击。</p>

<p>为了避免中间人攻击，聪明的简雍，发明了一种神奇的、无法撕毁、涂改和变造的小纸条（数字签名），上面写着“这把锁经过简雍认证，是刘备加密通信专用锁”，然后贴在甲锁上，这样子曹操就不能伪造锁了，这时候这个锁叫作证书。</p>

<p>但是问题又来了，许多人不认识简雍，他们怎么知道简雍就是可信的，他认证的锁就是可用的？于是关羽在这个小纸条的下方又贴了一个小纸条，“简雍经过关羽的认证，可以对刘备加密通信专用锁进行认证”。关羽不仅可以认证锁，还可以认证简雍的权力，这时候关羽就是CA。可是问题还没有解决，还是有很多傻瓜不认识关羽，于是诸葛亮又在关羽的小纸条上又贴了一个小纸条，“关羽经过诸葛亮的认证，可以对刘备加密通信专用锁进行认证”。问题依然没有解决，还是有白痴不认识诸葛亮，于是这时候需要一个权威的、人们无条件相信的人——汉献帝来对诸葛亮进行认证，这就是根CA，他贴上去的小纸条就叫作根证书。</p>

<p>以上是信任体系。</p>

<p>最后一个问题，SSL的中间人攻击怎么实施。这时候糜芳出场了，因为是刘备的手下，具有一个可信的证书，类似于“糜芳经过关羽的认证，可以对刘备加密通信专用锁进行认证”。于是他自己伪造了一个锁，然后利用上一级CA对他的信任，去骗取孙权使用他提供的锁初始化加密会话。因为他的锁上面有上一级CA的认证，所以孙权会认为这个锁是可信的，而实际上糜芳通过自己拥有的证书，可以实施中间人攻击，窃取孙权和刘备之间通信的内容。</p>

<p>以上便是SSL的中间人攻击。可以看出，SSL的中间人攻击是比较复杂的，一般利用的是上一级可信CA颁发一个伪造证书来进行攻击。</p>

<h2>解决方案</h2>

<p>SSL Pinning（又叫Certificate Pinning）可以理解为证书绑定。在一些应用场景中，客户端和服务器之间的通信是事先约定好的，既服务器地址和证书是预先知道的，这种情况常见于CS架构的应用中。这样的话在客户端事先保存好一份服务器的证书（含公钥），每次请求服务器的时候，将服务器返回的证书与客户端保存的证书进行对比，如果证书不符，说明受到中间人攻击，马上可以中断请求。这样的话中间人就无法伪造证书进行攻击了。</p>

<p>接着前面的故事，为了防范曹操各种手段的攻击，简雍派亲信送给孙权一把贴有简雍认证的小纸条的甲锁，然后告诉孙权，这才是真正的小纸条和甲锁，凡是跟这不一样的锁都是假的。过不了几天，孙权想给刘备写信了，糜芳拿着一个贴着“糜芳经过关羽的认证，可以对刘备加密通信专用锁进行认证”小纸条的戊锁来了，孙权一比对发现跟简雍给自己的甲锁不一样，勃然大怒，又是一个奸细，给我退出去斩了。从此，孙权和刘备可以安全快乐的进行通信了。</p>

<p>SSL Pinning可以很好的解决中间人攻击的问题，但是仅限于在客户端预先知道服务器地址和证书的场景下。如果是在服务器地址未知如需要用户手动输入服务器url的场景中，SSL Pinning就无法发挥作用了。</p>

<p>在我开发的一个iOS项目中使用了AFNetworking做为网络应用层，AFNetworking已经很好的支持了SSL Pinning。使用起来非常简单！</p>

<ul>
<li>首先在Prefix.pch文件最后加上：</li>
</ul>


<p>``` objc</p>

<h1>define <em>AFNETWORKING_PIN_SSL_CERTIFICATES</em></h1>

<p>```</p>

<p>如果是自签名的证书还需要加上：</p>

<p>``` objc</p>

<h1>define <em>AFNETWORKING_ALLOW_INVALID_SSL_CERTIFICATES</em></h1>

<p>```
否则在请求服务器的时候会弹出提示框说该服务器证书为不可信任的机构颁发</p>

<ul>
<li>然后把服务器证书添加到应用中，证书文件取什么名字无所谓，后缀必须是cer，并且是DER编码的证书</li>
</ul>


<p>如何制作自签名证书和转换DER编码证书文件（补充章节）可以查看我之前的一篇文章：<a href="/blog/2013/06/12/creating-a-certificate-authority-and-signing-the-ssl-certificates-using-openssl-in-iis8/">IIS8中使用OpenSSL来创建CA并且签发SSL证书</a></p>

<ul>
<li>最后在AFHTTPClient的继承类中加上一行代码：</li>
</ul>


<p><code>objc
[self setDefaultSSLPinningMode:AFSSLPinningModePublicKey];
</code></p>

<p>具体位置参考如下：</p>

<p>``` objc</p>

<h1>import &ldquo;HPAPIClient.h&rdquo;</h1>

<h1>import &ldquo;AFHTTPRequestOperationLogger.h&rdquo;</h1>

<p>@implementation HPAPIClient</p>

<ul>
<li><p>(HPAPIClient <em>)sharedClient
{
  static HPAPIClient </em>sharedClient = nil;
  static dispatch_once_t onceToken;</p>

<p>  dispatch_once(&amp;onceToken, ^{
      sharedClient = [[HPAPIClient alloc] initWithBaseURL:[NSURL URLWithString:kAPIBaseURL]];
  });
  return sharedClient;
}</p></li>
<li><p>(id)initWithBaseURL:(NSURL *)URL
{
  self = [super initWithBaseURL:URL];
  if (self) {
      [self registerHTTPOperationClass:[AFJSONRequestOperation class]];
      [self setDefaultHeader:@&ldquo;Accept&rdquo; value:@&ldquo;application/json&rdquo;];
      [self setDefaultSSLPinningMode:AFSSLPinningModePublicKey];
  }
  return self;
}
&hellip;
```</p></li>
</ul>


<h2>总结</h2>

<p>有了SSL＋SSL Pinning，在开发CS架构的应用中就可以大大提高网络数据传输的安全性，简化程序开发中其他的一些安全措施。我自己是感觉方便安全多了！</p>

<h2>References</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-in-the-middle attack</a></li>
<li><a href="http://baike.baidu.com/view/1531871.htm">中间人攻击</a></li>
<li><a href="http://www.zhihu.com/question/20744215">什么是 TLS 中间人攻击</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[快速简单自定义UINavigationController中返回按钮的样式和文字]]></title>
    <link href="http://alvinhu.com/blog/2012/11/28/customize-appearance-and-title-of-back-button-in-uinavigationcontroller/"/>
    <updated>2012-11-28T17:40:00+08:00</updated>
    <id>http://alvinhu.com/blog/2012/11/28/customize-appearance-and-title-of-back-button-in-uinavigationcontroller</id>
    <content type="html"><![CDATA[<p>在开发iPhone应用程序的时候，很多时候都会用到UINavigationController，其中的返回按钮（Back Button）里的文字会自动调用前一个UIViewController的标题。而且在早期iOS版本的时候想自定义返回按钮比较麻烦。好在iOS5出来以后提供了UIAppearance以方便开发者自定义iOS的风格样式，这个时候自定义返回按钮的样式就比较容易了：</p>

<p>``` objc
&ndash; (BOOL)application:(UIApplication <em>)application didFinishLaunchingWithOptions:(NSDictionary </em>)launchOptions
{</p>

<pre><code>// 自定义UIBarButtonItem返回按钮背景图片
UIImage *backButton = [[UIImage imageNamed:@"BackButton.png"] resizableImageWithCapInsets:UIEdgeInsetsMake(0, 15.0, 0, 5.0)];
UIImage *backButtonHighlighted = [[UIImage imageNamed:@"BackButtonHighlighted.png"] resizableImageWithCapInsets:UIEdgeInsetsMake(0, 15.0, 0, 5.0)];
[[UIBarButtonItem appearance] setBackButtonBackgroundImage:backButton forState:UIControlStateNormal barMetrics:UIBarMetricsDefault];
[[UIBarButtonItem appearance] setBackButtonBackgroundImage:backButtonHighlighted forState:UIControlStateHighlighted barMetrics:UIBarMetricsDefault];

// 自定义UIBarButtonItem返回按钮标题文字位置
[[UIBarButtonItem appearance] setBackButtonTitlePositionAdjustment:UIOffsetMake(-1.0, 0) forBarMetrics:UIBarMetricsDefault];

return YES;
</code></pre>

<p>}
```</p>

<p>上面的代码自定义了返回按钮的样式。</p>

<!-- more -->


<p>如果我们想把返回按钮里面的文字改成<code>返回</code>，简单的办法就是：</p>

<p>``` objc
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];

UIBarButtonItem *backButton = [[UIBarButtonItem alloc] init];
backButton.title = @"返回";
self.navigationItem.backBarButtonItem = backButton;
</code></pre>

<p>}
```</p>

<p>这里我们假设打开了ARC，所以不需要<code>[backButton release]</code>。</p>

<p>上面的办法只是一次性定义返回按钮的文字，如果需要把所有返回按钮的文字都改成<code>返回</code>，那就需要用到<code>Category</code>：</p>

<p>``` objc UINavigationItem+MyBackButton.h
@interface UINavigationItem (MyBackButton)</p>

<p>@end
```</p>

<p>``` objc UINavigationItem+MyBackButton.m</p>

<h1>import &ldquo;UINavigationItem+MyBackButton.h&rdquo;</h1>

<p>@implementation UINavigationItem (MyBackButton)</p>

<ul>
<li>(UIBarButtonItem *)backBarButtonItem
{
  return [[UIBarButtonItem alloc] initWithTitle:@&ldquo;返回&rdquo; style:UIBarButtonItemStylePlain target:nil action:nil];
}
@end
```</li>
</ul>


<p>把上面两个文件拖到项目里面就可以了。是不是很简单！</p>
]]></content>
  </entry>
  
</feed>
