<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SSL | alvin hu]]></title>
  <link href="http://alvinhu.com/blog/categories/ssl/atom.xml" rel="self"/>
  <link href="http://alvinhu.com/"/>
  <updated>2013-06-20T21:15:10+08:00</updated>
  <id>http://alvinhu.com/</id>
  <author>
    <name><![CDATA[alvinhu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSL的单向认证和双向认证]]></title>
    <link href="http://alvinhu.com/blog/2013/06/20/one-way-and-two-way-ssl-authentication/"/>
    <updated>2013-06-20T12:28:00+08:00</updated>
    <id>http://alvinhu.com/blog/2013/06/20/one-way-and-two-way-ssl-authentication</id>
    <content type="html"><![CDATA[<p>为了便于更好的认识和理解SSL协议，这里着重介绍SSL协议的握手流程。SSL协议既用到了公钥加密技术又用到了对称加密技术，对称加密技术虽然比公钥加密技术的速度快，可是公钥加密技术提供了更好的身份认证技术。SSL的握手流程非常有效的让客户端和服务器之间完成相互之间的身份认证。</p>

<h3>SSL握手流程</h3>

<ol>
<li>客户端向服务器发送<strong>ClientHello</strong>消息，说明它支持的最高TLS协议版本，随机数、密码算法列表及压缩方法。</li>
<li>服务器回复<strong>ServerHello</strong>消息，包含基于客户端<strong>ClientHello</strong>消息所选择的TLS协议版本，随机数、密码算法列表及压缩方法。服务器选择的协议版本为客户端和服务器都支持的最高版本。</li>
<li>当双方知道了连接参数，服务器向客户端发送证书。</li>
<li>客户端验证服务器证书的合法性，包括：服务器证书是否过期、发行服务器证书的CA是否可靠、发行CA的公钥能否正确解开服务器证书的发行CA的数字签名、服务器证书上的域名是否和服务器的实际域名相匹配。如果合法性验证没有通过，通讯将断开；如果合法性验证通过，将继续进行第5步。</li>
<li>客户端随机产生一个用于后面通讯的“对称密码”，然后用服务器的公钥（服务器的公钥从步骤3中的服务器证书中获得）对其加密，然后将加密后的“预主密码”传给服务器。</li>
<li>如果服务器要求客户端的身份认证（在握手过程中为可选），客户端可以建立一个随机数然后对其进行数据签名，将这个含有签名的随机数和客户端自己的证书以及加密过的“预主密码”一起传给服务器。</li>
<li>如果服务器要求客户端的身份认证，服务器必须检验客户端证书和签名随机数的合法性，具体的合法性验证包括：客户端证书是否过期，发行客户端证书的CA是否可靠，发行CA的公钥能否正确解开客户端证书的发行CA的数字签名，检查客户端证书是否在证书废止列表（CRL）中。如果合法性验证没有通过，通讯立刻中断；如果合法性验证通过，服务器将用自己的私钥解开加密的“预主密码”，然后执行一系列步骤来产生主通讯密码（客户端也将通过同样的方法产生相同的主通讯密码）。</li>
<li>服务器和客户端用相同的主密码即“通话密码”，一个对称密钥用于SSL协议的安全数据通讯的加解密通讯。同时在SSL通讯过程中还要完成数据通讯的完整性，防止数据通讯中的任何变化。</li>
<li>客户端向服务器发出信息，指明后面的数据通讯将使用的步骤8中的主密码为对称密钥，同时通知服务器客户端的握手过程结束。</li>
<li>服务器向客户端发出信息，指明后面的数据通讯将使用的步骤8中的主密码为对称密钥，同时通知客户端服务器的握手过程结束。</li>
<li>SSL的握手部分结束，SSL安全通道的数据通讯开始，客户端和服务器开始使用相同的对称密钥进行数据通讯，同时进行通讯完整性的检验。</li>
</ol>


<h3>单向认证vs双向认证</h3>

<p>上面所述的是<strong>双向认证SSL</strong>协议的具体通讯过程，这种情况要求服务器和客户端双方都有证书。<strong>单向认证SSL</strong>协议不需要客户端拥有CA证书，具体的流程相对于上面的步骤，只需将服务器验证客户端证书的步骤去掉，以及在协商对称密码方案，对称通话密钥时，服务器发送给客户端的是没有加过密的（这并不影响SSL过程的安全性）密码方案。这样，双方具体的通讯内容，就是加密过的数据。如果有第三方攻击，获得的只是加密的数据，第三方要获得有用的信息，就需要对加密的数据进行解密，这时候的安全就依赖于密码方案的安全。而幸运的是，目前所用的密码方案，只要通讯密钥长度足够的长，就足够的安全。这也是我们强调要求使用128位加密通讯的原因。</p>

<p>一般Web应用都是采用单向认证的，原因很简单，用户数目广泛，且无需做在通讯层做用户身份验证，一般都在应用逻辑层来保证用户的合法登入。但如果是企业应用对接，情况就不一样，可能会要求对客户端（相对而言）做身份验证。这时就需要做双向认证。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IIS8中使用OpenSSL来创建CA并且签发SSL证书]]></title>
    <link href="http://alvinhu.com/blog/2013/06/12/creating-a-certificate-authority-and-signing-the-ssl-certificates-using-openssl-in-iis8/"/>
    <updated>2013-06-12T00:49:00+08:00</updated>
    <id>http://alvinhu.com/blog/2013/06/12/creating-a-certificate-authority-and-signing-the-ssl-certificates-using-openssl-in-iis8</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近在为新的iOS app考虑安全机制，第一个进入脑海里的就是HTTPS和SSL。所以研究了一下Windows服务器下IIS部署HTTPS和证书的方法，以及如何让app与server进行安全的信息交互。</p>

<p>由于网上千篇一律的只是教大家怎么怎么操作，并没有告诉大家为什么这么操作。而作为一个喜欢打破砂锅问到底的强迫症患者，自己又花了一些时间研究了各个步骤及参数的原理，在这里把这些小小的理解及经验记录下来，即给有同样需求的同行们做个参考，也给未来的自己留作备份。</p>

<h2>申明</h2>

<p>本人并非互联网安全专家，也不是OpenSSL老手。如果这篇文章对你有用，本人非常高兴。如果无法解决问题，你可以google其他更加专业的文章，我相信只要花点时间肯定能够找到答案。本文中所有步骤都经过本人多次测试，但不能保证一定正确，在此仅供参考。如有不对之处，欢迎留言探讨及指正。</p>

<h2>准备</h2>

<ul>
<li>Windows 8 + IIS 8</li>
<li>直接下载编译好的<a href="http://slproweb.com/products/Win32OpenSSL.html">OpenSSL</a>，由于我的系统是64位的，所以我下的是最新版的<strong>Win64 OpenSSL v1.0.1e Light</strong></li>
<li>安装OpenSSL之前要先装<strong>Visual C++ 2008 SP1 Redistributables</strong>，根据系统选择<a href="http://www.microsoft.com/zh-cn/download/details.aspx?id=5582">32位</a>的和<a href="http://www.microsoft.com/zh-cn/download/details.aspx?id=2092">64位</a>下载并安装</li>
</ul>


<h2>开始</h2>

<h3>第一步：安装OpenSSL</h3>

<ol>
<li>尽管我们已经安装了<strong>Visual C++ 2008 SP1 Redistributables</strong>，安装刚开始还是会提示未安装<strong>Visual C++ 2008 Redistributables</strong>，不管它直接点击确定</li>
<li>一路下一步就可以了，安装文件夹我选择<strong>C:\OpenSSL</strong></li>
<li>在<strong>Copy OpenSSL DLLs to:</strong>的地方我选择<strong>The OpenSSL binaries (/bin) directory</strong>，我不喜欢把什么DLL都往Windows目录丢，这样放在应用程序目录下比较干净</li>
<li>完成安装</li>
</ol>


<h3>第二步：配置OpenSSL</h3>

<p>1、将路径<strong>C:\OpenSSL\bin\</strong>添加到系统路径中（控制面板 > 系统与安全 > 系统 > 高级系统设置 > 环境变量 > 系统变量 > Path），这样在任何路径中都能运行OpenSSL命令</p>

<p>2、打开openssl.cfg，修改一下配置：</p>

<pre><code>dir = . # 存放CA文件的文件夹，里面还需要手动建立子文件夹及件，后面会提到
default_days = 10950 # 证书有效期，设30年比较省心
policy = policy_anything # CA资料和证书申请资料的匹配策略改为这个比较方便
countryName_default = CN # 默认国家
stateOrProvinceName_default = Jiagxi # 默认省份
localityName_default = Nanchang # 默认城市，在localityName = Locality Name (eg,city)下增加这一条
0.organizationName_default = Kashuo # 默认组织
</code></pre>

<p>3、接着准备文件夹及文件：</p>

<ul>
<li>新建文件夹<strong>C:\OpenSSL\bin\KashuoCA</strong></li>
<li>新建文件夹<strong>C:\OpenSSL\bin\KashuoCA\newcerts</strong></li>
<li>新建文件<strong>C:\OpenSSL\bin\KashuoCA\serial</strong>（无后缀名），里面写入<code>01</code>，用来存放签发证书流水号</li>
<li>新建空文件<strong>C:\OpenSSL\bin\KashuoCA\index.txt</strong>，用来存放签发证书记录</li>
</ul>


<p>4、为了省去每次运行命令都要指定openssl.cfg的麻烦，打开命令提示符（cmd.exe），将cfg文件设为系统变量：</p>

<p><code>
set OPENSSL_CONF=C:\OpenSSL\bin\openssl.cfg
</code></p>

<p>5、重新打开命令提示符，进入KashuoCA文件夹：</p>

<p><code>
cd C:\OpenSSL\bin\KashuoCA
</code></p>

<p>准备好以后开始下面的步骤</p>

<h3>第三步：建立CA</h3>

<p>命令：</p>

<p><code>
openssl req -x509 -newkey rsa:1024 -keyout ca.key -out ca.cer
</code></p>

<p>参数：</p>

<pre><code>req # 用来生成PKCS#10格式的证书申请文件，也可以生成自签名的CA根证书
-x509 # 有这个参数就是生成CA根证书，没有就是生成证书申请文件
-newkey rsa:1024 # 同时生成1024位RSA算法的私钥
-keyout # CA私钥
-out # 证书申请文件或CA根证书
</code></pre>

<p>由于我们之前已经设置了证书有效期和cfg文件的地址，所以在命令里就不需要重复设置了</p>

<p>运行命令以后会要求输入私钥密码，并且再输入一次确认密码。在输入国家省份等资料的时候直接回车使用之前我们设置的默认值就可以了，但是在<strong>Organizational Unit Name</strong>、<strong>Common Name</strong>和<strong>Email Address</strong>三个地方没有设置默认值，因为这三个资料在CA证书和服务器证书里是不一样的。</p>

<pre><code>C:\OpenSSL\bin\KashuoCA&gt;openssl req -x509 -newkey rsa:1024 -keyout ca.key -out ca.cer
Loading 'screen' into random state - done
Generating a 1024 bit RSA private key
...........++++++
.........................++++++
writing new private key to 'ca.key'
Enter PEM pass phrase:
Verifying - Enter PEM pass phrase:
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [CN]:
State or Province Name (full name) [Jiangxi]:
Locality Name (eg, city) [Nanchang]:
Organization Name (eg, company) [Kashuo]:
Organizational Unit Name (eg, section) []:KashuoCA
Common Name (e.g. server FQDN or YOUR name) []:KashuoCA
Email Address []:ca@kashuo.com
</code></pre>

<p>这时候我们就有了CA根证书和私钥了！</p>

<h3>第四步：通过IIS生成证书申请文件</h3>

<p>由于本例中证书文件是部署在IIS中，所以通过IIS直接生成证书文件会比较方便。当然第二步中提到了通过OpenSSL的req方法也可以生成证书申请文件。</p>

<p>1、打开<strong>IIS</strong></p>

<p>2、在左侧<strong>连接</strong>中选择服务器</p>

<p>3、在中间<strong>主页</strong>里的<strong>IIS</strong>中选择<strong>服务器证书</strong></p>

<p>4、在右侧<strong>操作</strong>中选择<strong>创建证书申请</strong></p>

<p>5、在打开的窗口中填入以下信息：</p>

<pre><code>通用名称：www.kashuo.com
组织：Kashuo
组织单位：KashuoServer
城市/地点：Nanchang
省/市/自治区：Jiangxi
国家/地区：CN
</code></pre>

<p>通用名称里填写的域名要与该证书所绑定的网站域名一致，否则用户在浏览网站的时候会提示证书与域名不一致</p>

<p>6、加密服务选择RSA和1024位</p>

<p>7、最后保存证书申请的文件为<strong>C:\OpenSSL\bin\KashuoCA\certreq.txt</strong></p>

<h3>第五步：签发服务器证书</h3>

<p>现在，CA证书文件ca.cer、CA私钥ca.key、服务器证书申请certreq.txt三个文件都在KashuoCA文件夹下</p>

<p>命令：</p>

<p><code>
openssl ca -in certreq.txt -cert ca.cer -keyfile ca.key -out iis.cer
</code></p>

<p>参数：</p>

<pre><code>ca # 主要用来签发证书申请
-in # 证书申请文件
-cert # CA证书
-keyfile # CA私钥
-out # 签发的证书
</code></pre>

<p>运行命令以后需要输入CA的私钥密码</p>

<pre><code>C:\OpenSSL\bin\KashuoCA&gt;openssl ca -in certreq.txt -cert ca.cer -keyfile ca.key -out iis.cer
Using configuration from C:\OpenSSL\bin\openssl.cfg
Loading 'screen' into random state - done
Enter pass phrase for ca.key:
Check that the request matches the signature
Signature ok
Certificate Details:
        Serial Number: 1 (0x1)
        Validity
            Not Before: Jun 13 10:32:25 2013 GMT
            Not After : Jun  6 10:32:25 2043 GMT
        Subject:
            countryName               = CN
            stateOrProvinceName       = Jiangxi
            localityName              = Nanchang
            organizationName          = Kashuo
            organizationalUnitName    = KashuoServer
            commonName                = www.kashuo.com
        X509v3 extensions:
            X509v3 Basic Constraints:
                CA:FALSE
            Netscape Comment:
                OpenSSL Generated Certificate
            X509v3 Subject Key Identifier:
                E0:8A:69:4A:D1:0A:98:26:EA:AE:AF:5E:6D:A7:A7:C4:DE:07:13:DF
            X509v3 Authority Key Identifier:
                keyid:37:48:69:62:0E:FD:FB:1E:83:EB:DE:2D:0D:F6:55:C1:E1:76:EF:BA

Certificate is to be certified until Jun  6 10:32:25 2043 GMT (10950 days)
Sign the certificate? [y/n]:y


1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
</code></pre>

<p>最后我们得到了服务器证书<strong>iis.cer</strong></p>

<h3>第六步：在服务器上导入CA根证书</h3>

<p>由于第三步生成的CA根证书是自签名的，并非由系统可以识别的第三方信任机构签发，所以需要将CA根证书导入到服务器中。</p>

<ol>
<li>双击<strong>ca.cer</strong>打开证书详情</li>
<li>点击<strong>安装证书</strong>打开<strong>证书导入向导</strong></li>
<li>存储位置选择<strong>本地计算机</strong>然后下一步</li>
<li>选择<strong>将所有的证书都放入下列存储</strong></li>
<li>点击浏览，选择<strong>受信任的根证据颁发机构</strong></li>
<li>导入完成</li>
</ol>


<h3>第七步：完成IIS证书申请</h3>

<p>现在可以将第五步生成的<strong>iis.cer</strong>导入到IIS中了：</p>

<ol>
<li>点击第四步<strong>创建证书申请</strong>下方的<strong>完成证书申请</strong></li>
<li>选择证书文件：<strong>C:\OpenSSL\bin\KashuoCA\iis.cer</strong></li>
<li>输入一个好记名称，如<strong>www.kashuo.com</strong></li>
<li>证书存储默认为<strong>个人</strong>不变</li>
<li>点击确定完成证书导入</li>
</ol>


<p>这个时候在服务器证书列表里就可以看到这个证书了。</p>

<h3>第八步：打开网站的SSL设置</h3>

<p>安装好IIS证书以后就可以打开网站的SSL设置了：</p>

<ol>
<li>在IIS左侧<strong>连接</strong>中选择<strong>网站</strong></li>
<li>在右侧<strong>操作</strong>中点击<strong>绑定</strong></li>
<li>在打开的<strong>网站绑定</strong>中添加一条记录：

<ul>
<li><strong>类型</strong>选择<strong>https</strong></li>
<li><strong>主机名</strong>填写绑定的域名，如<strong>www.kashuo.com</strong></li>
<li><strong>证书</strong>就选择我们刚刚添加的证书</li>
<li>确定完成</li>
</ul>
</li>
<li>然后在中间<strong>主页</strong>里的<strong>IIS</strong>中选择<strong>SSL设置</strong>，这里根据自己的需求进行设置

<ul>
<li><strong>要求SSL</strong>：勾选以后只能通过https访问，否则http和https都可以访问</li>
<li><strong>客户证书</strong>：

<ul>
<li>忽略：不论客户端有没有证书都不检验</li>
<li>接受：如果客户端没有证书就不检验，否则弹出提示框让用户选择证书并检验证书合法性</li>
<li>必需：客户端必需提供合法证书才能进行访问</li>
</ul>
</li>
</ul>
</li>
<li>设置完成以后点击右边<strong>应用</strong>就可以了</li>
</ol>


<p>对于单向认证SSL连接，在<strong>客户证书</strong>里选择<strong>忽略</strong>就可以，教程到这里也就结束了。客户端在访问https地址的时候会收到一个提示，即服务器证书并非由信任的第三方证书颁发机构颁发，客户端选择继续或者保存为信任的证书就可以继续访问了。</p>

<p>如果对于安全性要求很高的网站，需要使用双向认证SSL连接，在<strong>客户证书</strong>里就要选择<strong>必需</strong>，即服务端和客户端互相检验证书合法性。那就还需要为客户端生成一个服务端认可的证书。</p>
]]></content>
  </entry>
  
</feed>
